generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model activities {
  activityId    Int             @id @unique(map: "activityId_UNIQUE") @default(autoincrement())
  ownerId       Int
  name          String?
  createdAt     DateTime?
  lastEdited    DateTime?
  owner         users           @relation(fields: [ownerId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_users1")
  activityItems activityItems[]
  assignments   assignments[]

  @@index([ownerId], map: "fk_assignments_users1_idx")
}

model activityItems {
  activityId Int
  docId      Int
  activity   activities @relation(fields: [activityId], references: [activityId], onDelete: NoAction, onUpdate: NoAction, map: "fk_activities_has_documents_activities1")
  document   documents  @relation(fields: [docId], references: [docId], onDelete: NoAction, onUpdate: NoAction, map: "fk_activities_has_documents_documents1")

  @@id([activityId, docId])
  @@index([activityId], map: "fk_activities_has_documents_activities1_idx")
  @@index([docId], map: "fk_activities_has_documents_documents1_idx")
}

model assignmentItems {
  assignmentId         Int
  docVersionId         Int
  docId                Int
  assignment           assignments            @relation(fields: [assignmentId], references: [assignmentId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_has_documentVersions_assignments1")
  documentVersion      documentVersions       @relation(fields: [docVersionId, docId], references: [version, docId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_has_documentVersions_documentVersions1")
  studentItemResponses studentItemResponses[]

  @@id([assignmentId, docVersionId, docId])
  @@index([assignmentId], map: "fk_assignments_has_documentVersions_assignments1_idx")
  @@index([docVersionId, docId], map: "fk_assignments_has_documentVersions_documentVersions1_idx")
}

model assignments {
  assignmentId               Int                          @id @unique(map: "assignmentId_UNIQUE") @default(autoincrement())
  classCode                  String?                      @db.VarChar(45)
  activityId                 Int
  ownerId                    Int
  assignmentItems            assignmentItems[]
  activity                   activities                   @relation(fields: [activityId], references: [activityId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_activities1")
  owner                      users                        @relation(fields: [ownerId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_users2")
  studentAssignmentResponses studentAssignmentResponses[]

  @@index([activityId], map: "fk_assignments_activities1_idx")
  @@index([ownerId], map: "fk_assignments_users2_idx")
}

model documentVersions {
  version           Int
  docId             Int
  cid               String?
  createdAt         DateTime?
  doenetmlVersionId Int
  assignmentItems   assignmentItems[]
  document          documents         @relation(fields: [docId], references: [docId], onDelete: NoAction, onUpdate: NoAction, map: "fk_documents_activities1")
  doenetmlVersion   doenetmlVersions  @relation(fields: [doenetmlVersionId], references: [versionId], onDelete: NoAction, onUpdate: NoAction, map: "fk_documentVersions_doenetmlVersions")

  @@id([version, docId])
  @@index([docId], map: "fk_documents_activities1_idx")
}

model documents {
  docId             Int                @id @unique(map: "docId_UNIQUE") @default(autoincrement())
  ownerId           Int
  contentLocation   String?
  lastEdited        DateTime?
  name              String?
  isPublic          Boolean?
  isDeleted         Boolean?
  imagePath         String?
  doenetmlVersionId Int
  activityItems     activityItems[]
  documentVersions  documentVersions[]
  owner             users              @relation(fields: [ownerId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_activities_users")
  doenetmlVersion   doenetmlVersions   @relation(fields: [doenetmlVersionId], references: [versionId], onDelete: NoAction, onUpdate: NoAction, map: "fk_documents_doenetmlVersions")

  @@index([ownerId], map: "fk_activities_users_idx")
}

model doenetmlVersions {
  versionId          Int                @id @unique(map: "versionId_UNIQUE") @default(autoincrement())
  displayedVersion   String             @unique(map: "displayedVersion_UNIQUE")
  fullVersion        String
  default            Boolean            @default(false)
  deprecated         Boolean            @default(false)
  removed            Boolean            @default(false)
  deprecationMessage String             @default("")
  documents          documents[]
  documentVersions   documentVersions[]
}

model studentAssignmentResponses {
  assignmentId Int
  userId       Int
  score        Float?
  assignment   assignments @relation(fields: [assignmentId], references: [assignmentId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_has_users_assignments1")
  user         users       @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_has_users_users1")

  @@id([assignmentId, userId])
  @@index([assignmentId], map: "fk_assignments_has_users_assignments1_idx")
  @@index([userId], map: "fk_assignments_has_users_users1_idx")
}

model studentItemResponses {
  assignmentId   Int
  docVersionId   Int
  docId          Int
  userId         Int
  response       String?
  assignmentItem assignmentItems @relation(fields: [assignmentId, docVersionId, docId], references: [assignmentId, docVersionId, docId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignmentItems_has_users_assignmentItems1")
  user           users           @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignmentItems_has_users_users1")

  @@id([assignmentId, docVersionId, docId, userId])
  @@index([assignmentId, docVersionId, docId], map: "fk_assignmentItems_has_users_assignmentItems1_idx")
  @@index([userId], map: "fk_assignmentItems_has_users_users1_idx")
}

model users {
  userId                     Int                          @id @default(autoincrement())
  email                      String                       @unique(map: "email_UNIQUE") @db.VarChar(45)
  activities                 activities[]
  assignments                assignments[]
  documents                  documents[]
  studentAssignmentResponses studentAssignmentResponses[]
  studentItemResponses       studentItemResponses[]
}
