generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model activities {
  activityId    Int             @id @unique(map: "activityId_UNIQUE")
  owner         Int
  name          String?         @db.VarChar(255)
  createdAt     DateTime?       @db.DateTime(0)
  lastEdited    DateTime?       @db.DateTime(0)
  users         users           @relation(fields: [owner], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_users1")
  activityItems activityItems[]
  assignments   assignments[]

  @@index([owner], map: "fk_assignments_users1_idx")
}

model activityItems {
  activityId Int
  docId      Int
  activities activities @relation(fields: [activityId], references: [activityId], onDelete: NoAction, onUpdate: NoAction, map: "fk_activities_has_documents_activities1")
  documents  documents  @relation(fields: [docId], references: [docId], onDelete: NoAction, onUpdate: NoAction, map: "fk_activities_has_documents_documents1")

  @@id([activityId, docId])
  @@index([activityId], map: "fk_activities_has_documents_activities1_idx")
  @@index([docId], map: "fk_activities_has_documents_documents1_idx")
}

model assignmentItems {
  assignmentId         Int
  docVersion           Int
  docId                Int
  assignments          assignments            @relation(fields: [assignmentId], references: [assignmentId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_has_documentVersions_assignments1")
  documentVersions     documentVersions       @relation(fields: [docVersion, docId], references: [version, docId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_has_documentVersions_documentVersions1")
  studentItemResponses studentItemResponses[]

  @@id([assignmentId, docVersion, docId])
  @@index([assignmentId], map: "fk_assignments_has_documentVersions_assignments1_idx")
  @@index([docVersion, docId], map: "fk_assignments_has_documentVersions_documentVersions1_idx")
}

model assignments {
  assignmentId               Int                          @id @unique(map: "assignmentId_UNIQUE")
  classCode                  String?                      @db.VarChar(45)
  activityId                 Int
  owner                      Int
  assignmentItems            assignmentItems[]
  activities                 activities                   @relation(fields: [activityId], references: [activityId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_activities1")
  users                      users                        @relation(fields: [owner], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_users2")
  studentAssignmentResponses studentAssignmentResponses[]

  @@index([activityId], map: "fk_assignments_activities1_idx")
  @@index([owner], map: "fk_assignments_users2_idx")
}

model documentVersions {
  version         Int
  docId           Int
  cid             String?           @db.VarChar(255)
  createdAt       DateTime?         @db.DateTime(0)
  assignmentItems assignmentItems[]
  documents       documents         @relation(fields: [docId], references: [docId], onDelete: NoAction, onUpdate: NoAction, map: "fk_documents_activities1")

  @@id([version, docId])
  @@index([docId], map: "fk_documents_activities1_idx")
}

model documents {
  docId            Int                @id @unique(map: "docId_UNIQUE")
  owner            Int
  contentLocation  String?            @db.VarChar(255)
  lastEdited       DateTime?          @db.DateTime(0)
  activityItems    activityItems[]
  documentVersions documentVersions[]
  users            users              @relation(fields: [owner], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_activities_users")

  @@index([owner], map: "fk_activities_users_idx")
}

model studentAssignmentResponses {
  assignmentId Int
  userId       Int
  score        Float?      @db.Float
  assignments  assignments @relation(fields: [assignmentId], references: [assignmentId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_has_users_assignments1")
  users        users       @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignments_has_users_users1")

  @@id([assignmentId, userId])
  @@index([assignmentId], map: "fk_assignments_has_users_assignments1_idx")
  @@index([userId], map: "fk_assignments_has_users_users1_idx")
}

model studentItemResponses {
  assignmentId    Int
  docVersion      Int
  docId           Int
  userId          Int
  response        String?         @db.VarChar(255)
  assignmentItems assignmentItems @relation(fields: [assignmentId, docVersion, docId], references: [assignmentId, docVersion, docId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignmentItems_has_users_assignmentItems1")
  users           users           @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_assignmentItems_has_users_users1")

  @@id([assignmentId, docVersion, docId, userId])
  @@index([assignmentId, docVersion, docId], map: "fk_assignmentItems_has_users_assignmentItems1_idx")
  @@index([userId], map: "fk_assignmentItems_has_users_users1_idx")
}

model users {
  userId                     Int                          @id
  email                      String                       @unique(map: "email_UNIQUE") @db.VarChar(45)
  activities                 activities[]
  assignments                assignments[]
  documents                  documents[]
  studentAssignmentResponses studentAssignmentResponses[]
  studentItemResponses       studentItemResponses[]
}
